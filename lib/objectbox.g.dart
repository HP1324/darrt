// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'app/services/boxpref.dart';
import 'category/models/task_category.dart';
import 'folder/models/folder.dart';
import 'note/models/note.dart';
import 'quickreminder/model/quick_reminder.dart';
import 'task/models/task.dart';
import 'task/models/task_completion.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 8058497308889952526),
    name: 'Task',
    lastPropertyId: const obx_int.IdUid(17, 7029089935523781103),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3011675586257861214),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2044728185259767230),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1464854755061674689),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2566982689405356346),
        name: 'dueDate',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3230867900140322076),
        name: 'isDone',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 2955117004878639046),
        name: 'priority',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 649159581903973746),
        name: 'isRepeating',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 8321330187934886277),
        name: 'startDate',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 2220714964218965748),
        name: 'endDate',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 4184139455821739095),
        name: 'reminders',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 6578782677401607101),
        name: 'repeatConfig',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 6880389326173513004),
        name: 'uuid',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 6432319850255234333),
        name: 'categoryUuids',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 9114797388521663395),
        name: 'startTime',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 6053700481326688970),
        name: 'notes',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 7565050176549288089),
        name: 'stats',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 7029089935523781103),
        name: 'endTime',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 5424052804524184019),
        name: 'categories',
        targetId: const obx_int.IdUid(8, 4829064955625959483),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'completions',
        srcEntity: 'TaskCompletion',
        srcField: '',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 2058329802195215529),
    name: 'TaskCompletion',
    lastPropertyId: const obx_int.IdUid(6, 1722549919444422731),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2054798711108846247),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5370597500820433678),
        name: 'date',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3558835726652927299),
        name: 'isDone',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4698986600626205175),
        name: 'taskId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 7157772403585420880),
        relationTarget: 'Task',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 628461710127996342),
        name: 'uuid',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 1722549919444422731),
        name: 'taskUuid',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 8867042065594792655),
    name: 'Folder',
    lastPropertyId: const obx_int.IdUid(5, 2665913149026616990),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8374239025444042069),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 258328508912231986),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1747983063713572951),
        name: 'uuid',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3878403398080161662),
        name: 'icon',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2665913149026616990),
        name: 'color',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'notes',
        srcEntity: 'Note',
        srcField: 'folders',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 1091526975409140722),
    name: 'Note',
    lastPropertyId: const obx_int.IdUid(6, 4403227657671098767),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8077787761880950014),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1386711038256437477),
        name: 'content',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4405219377992249128),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3896664754239967175),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 293678561892324517),
        name: 'uuid',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4403227657671098767),
        name: 'folderUuids',
        type: 30,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(2, 752695274466247110),
        name: 'folders',
        targetId: const obx_int.IdUid(4, 8867042065594792655),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(8, 4829064955625959483),
    name: 'TaskCategory',
    lastPropertyId: const obx_int.IdUid(5, 1882302315608805349),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 676214022164626525),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 901193005429752249),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3520652600698507104),
        name: 'icon',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5475214520042284200),
        name: 'color',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1882302315608805349),
        name: 'uuid',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'tasks',
        srcEntity: 'Task',
        srcField: 'categories',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(9, 3517275010729598994),
    name: 'QuickReminder',
    lastPropertyId: const obx_int.IdUid(5, 9084756514200359992),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 246131569503549765),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5177062319457027476),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 9115729849534517293),
        name: 'type',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7987538131712612453),
        name: 'durationMinutes',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 9084756514200359992),
        name: 'notifId',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(10, 6533416713158041885),
    name: 'BoxPref',
    lastPropertyId: const obx_int.IdUid(4, 6417919618007841260),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8797700107043626500),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 96898958566753866),
        name: 'key',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(2, 2470644941414605064),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5872348964623481480),
        name: 'type',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6417919618007841260),
        name: 'value',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(10, 6533416713158041885),
    lastIndexId: const obx_int.IdUid(2, 2470644941414605064),
    lastRelationId: const obx_int.IdUid(2, 752695274466247110),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [
      4083594686780447909,
      2850945233524803595,
      1485195572604595133,
    ],
    retiredIndexUids: const [],
    retiredPropertyUids: const [
      1196596514986590602,
      6024314461305237015,
      7182844801193691355,
      4526307758566994091,
      882724735845963533,
      4631094889994363395,
      5352492292411416707,
      8334346387110220720,
      9128676297472951657,
      9184129150860060988,
      8757146302406698459,
      7167336752493011206,
      4127554963078891830,
      6805630063619366929,
      1402961393425076424,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Task: obx_int.EntityDefinition<Task>(
      model: _entities[0],
      toOneRelations: (Task object) => [],
      toManyRelations: (Task object) => {
        obx_int.RelInfo<Task>.toMany(1, object.id): object.categories,
        obx_int.RelInfo<TaskCompletion>.toOneBacklink(
          4,
          object.id,
          (TaskCompletion srcObject) => srcObject.task,
        ): object.completions,
      },
      getId: (Task object) => object.id,
      setId: (Task object, int id) {
        object.id = id;
      },
      objectToFB: (Task object, fb.Builder fbb) {
        final titleOffset = fbb.writeString(object.title);
        final priorityOffset = fbb.writeString(object.priority);
        final remindersOffset = object.reminders == null
            ? null
            : fbb.writeString(object.reminders!);
        final repeatConfigOffset = object.repeatConfig == null
            ? null
            : fbb.writeString(object.repeatConfig!);
        final uuidOffset = fbb.writeString(object.uuid);
        final categoryUuidsOffset = fbb.writeList(
          object.categoryUuids.map(fbb.writeString).toList(growable: false),
        );
        final notesOffset = object.notes == null
            ? null
            : fbb.writeString(object.notes!);
        final statsOffset = object.stats == null
            ? null
            : fbb.writeString(object.stats!);
        fbb.startTable(18);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, titleOffset);
        fbb.addInt64(2, object.createdAt?.millisecondsSinceEpoch);
        fbb.addInt64(3, object.dueDate.millisecondsSinceEpoch);
        fbb.addBool(4, object.isDone);
        fbb.addOffset(5, priorityOffset);
        fbb.addBool(6, object.isRepeating);
        fbb.addInt64(7, object.startDate.millisecondsSinceEpoch);
        fbb.addInt64(8, object.endDate?.millisecondsSinceEpoch);
        fbb.addOffset(9, remindersOffset);
        fbb.addOffset(10, repeatConfigOffset);
        fbb.addOffset(11, uuidOffset);
        fbb.addOffset(12, categoryUuidsOffset);
        fbb.addInt64(13, object.startTime?.millisecondsSinceEpoch);
        fbb.addOffset(14, notesOffset);
        fbb.addOffset(15, statsOffset);
        fbb.addInt64(16, object.endTime?.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final createdAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          8,
        );
        final endDateValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          20,
        );
        final startTimeValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          30,
        );
        final endTimeValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          36,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final createdAtParam = createdAtValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(createdAtValue);
        final dueDateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
        );
        final startDateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
        );
        final endDateParam = endDateValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(endDateValue);
        final startTimeParam = startTimeValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(startTimeValue);
        final endTimeParam = endTimeValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(endTimeValue);
        final isRepeatingParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          16,
          false,
        );
        final isDoneParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          12,
          false,
        );
        final priorityParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final repeatConfigParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 24);
        final remindersParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final notesParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 32);
        final statsParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 34);
        final uuidParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 26, '');
        final categoryUuidsParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 28, []);
        final object = Task(
          id: idParam,
          title: titleParam,
          createdAt: createdAtParam,
          dueDate: dueDateParam,
          startDate: startDateParam,
          endDate: endDateParam,
          startTime: startTimeParam,
          endTime: endTimeParam,
          isRepeating: isRepeatingParam,
          isDone: isDoneParam,
          priority: priorityParam,
          repeatConfig: repeatConfigParam,
          reminders: remindersParam,
          notes: notesParam,
          stats: statsParam,
          uuid: uuidParam,
          categoryUuids: categoryUuidsParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Task>(
          object.categories,
          store,
          obx_int.RelInfo<Task>.toMany(1, object.id),
        );
        obx_int.InternalToManyAccess.setRelInfo<Task>(
          object.completions,
          store,
          obx_int.RelInfo<TaskCompletion>.toOneBacklink(
            4,
            object.id,
            (TaskCompletion srcObject) => srcObject.task,
          ),
        );
        return object;
      },
    ),
    TaskCompletion: obx_int.EntityDefinition<TaskCompletion>(
      model: _entities[1],
      toOneRelations: (TaskCompletion object) => [object.task],
      toManyRelations: (TaskCompletion object) => {},
      getId: (TaskCompletion object) => object.id,
      setId: (TaskCompletion object, int id) {
        object.id = id;
      },
      objectToFB: (TaskCompletion object, fb.Builder fbb) {
        final uuidOffset = object.uuid == null
            ? null
            : fbb.writeString(object.uuid!);
        final taskUuidOffset = object.taskUuid == null
            ? null
            : fbb.writeString(object.taskUuid!);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.date.millisecondsSinceEpoch);
        fbb.addBool(2, object.isDone);
        fbb.addInt64(3, object.task.targetId);
        fbb.addOffset(4, uuidOffset);
        fbb.addOffset(5, taskUuidOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final dateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
        );
        final isDoneParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          8,
          false,
        );
        final taskUuidParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final uuidParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final object = TaskCompletion(
          id: idParam,
          date: dateParam,
          isDone: isDoneParam,
          taskUuid: taskUuidParam,
          uuid: uuidParam,
        );
        object.task.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.task.attach(store);
        return object;
      },
    ),
    Folder: obx_int.EntityDefinition<Folder>(
      model: _entities[2],
      toOneRelations: (Folder object) => [],
      toManyRelations: (Folder object) => {
        obx_int.RelInfo<Note>.toManyBacklink(2, object.id): object.notes,
      },
      getId: (Folder object) => object.id,
      setId: (Folder object, int id) {
        object.id = id;
      },
      objectToFB: (Folder object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final uuidOffset = fbb.writeString(object.uuid);
        final iconOffset = fbb.writeString(object.icon);
        final colorOffset = fbb.writeString(object.color);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, uuidOffset);
        fbb.addOffset(3, iconOffset);
        fbb.addOffset(4, colorOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final iconParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final colorParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final uuidParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = Folder(
          id: idParam,
          name: nameParam,
          icon: iconParam,
          color: colorParam,
          uuid: uuidParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Folder>(
          object.notes,
          store,
          obx_int.RelInfo<Note>.toManyBacklink(2, object.id),
        );
        return object;
      },
    ),
    Note: obx_int.EntityDefinition<Note>(
      model: _entities[3],
      toOneRelations: (Note object) => [],
      toManyRelations: (Note object) => {
        obx_int.RelInfo<Note>.toMany(2, object.id): object.folders,
      },
      getId: (Note object) => object.id,
      setId: (Note object, int id) {
        object.id = id;
      },
      objectToFB: (Note object, fb.Builder fbb) {
        final contentOffset = fbb.writeString(object.content);
        final uuidOffset = fbb.writeString(object.uuid);
        final folderUuidsOffset = fbb.writeList(
          object.folderUuids.map(fbb.writeString).toList(growable: false),
        );
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, contentOffset);
        fbb.addInt64(2, object.createdAt?.millisecondsSinceEpoch);
        fbb.addInt64(3, object.updatedAt?.millisecondsSinceEpoch);
        fbb.addOffset(4, uuidOffset);
        fbb.addOffset(5, folderUuidsOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final createdAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          8,
        );
        final updatedAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final contentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final createdAtParam = createdAtValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(createdAtValue);
        final updatedAtParam = updatedAtValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(updatedAtValue);
        final uuidParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final folderUuidsParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 14, []);
        final object = Note(
          id: idParam,
          content: contentParam,
          createdAt: createdAtParam,
          updatedAt: updatedAtParam,
          uuid: uuidParam,
          folderUuids: folderUuidsParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Note>(
          object.folders,
          store,
          obx_int.RelInfo<Note>.toMany(2, object.id),
        );
        return object;
      },
    ),
    TaskCategory: obx_int.EntityDefinition<TaskCategory>(
      model: _entities[4],
      toOneRelations: (TaskCategory object) => [],
      toManyRelations: (TaskCategory object) => {
        obx_int.RelInfo<Task>.toManyBacklink(1, object.id): object.tasks,
      },
      getId: (TaskCategory object) => object.id,
      setId: (TaskCategory object, int id) {
        object.id = id;
      },
      objectToFB: (TaskCategory object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final iconOffset = fbb.writeString(object.icon);
        final colorOffset = fbb.writeString(object.color);
        final uuidOffset = fbb.writeString(object.uuid);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, iconOffset);
        fbb.addOffset(3, colorOffset);
        fbb.addOffset(4, uuidOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final iconParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final colorParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final uuidParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final object = TaskCategory(
          id: idParam,
          name: nameParam,
          icon: iconParam,
          color: colorParam,
          uuid: uuidParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<TaskCategory>(
          object.tasks,
          store,
          obx_int.RelInfo<Task>.toManyBacklink(1, object.id),
        );
        return object;
      },
    ),
    QuickReminder: obx_int.EntityDefinition<QuickReminder>(
      model: _entities[5],
      toOneRelations: (QuickReminder object) => [],
      toManyRelations: (QuickReminder object) => {},
      getId: (QuickReminder object) => object.id,
      setId: (QuickReminder object, int id) {
        object.id = id;
      },
      objectToFB: (QuickReminder object, fb.Builder fbb) {
        final titleOffset = object.title == null
            ? null
            : fbb.writeString(object.title!);
        final typeOffset = object.type == null
            ? null
            : fbb.writeString(object.type!);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, titleOffset);
        fbb.addOffset(2, typeOffset);
        fbb.addInt64(3, object.durationMinutes);
        fbb.addInt64(4, object.notifId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final durationMinutesParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final typeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final notifIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final object = QuickReminder(
          id: idParam,
          durationMinutes: durationMinutesParam,
          title: titleParam,
          type: typeParam,
          notifId: notifIdParam,
        );

        return object;
      },
    ),
    BoxPref: obx_int.EntityDefinition<BoxPref>(
      model: _entities[6],
      toOneRelations: (BoxPref object) => [],
      toManyRelations: (BoxPref object) => {},
      getId: (BoxPref object) => object.id,
      setId: (BoxPref object, int id) {
        object.id = id;
      },
      objectToFB: (BoxPref object, fb.Builder fbb) {
        final keyOffset = fbb.writeString(object.key);
        final typeOffset = fbb.writeString(object.type);
        final valueOffset = fbb.writeString(object.value);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, keyOffset);
        fbb.addOffset(2, typeOffset);
        fbb.addOffset(3, valueOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final keyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final typeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final valueParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final object = BoxPref(
          key: keyParam,
          type: typeParam,
          value: valueParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Task] entity fields to define ObjectBox queries.
class Task_ {
  /// See [Task.id].
  static final id = obx.QueryIntegerProperty<Task>(_entities[0].properties[0]);

  /// See [Task.title].
  static final title = obx.QueryStringProperty<Task>(
    _entities[0].properties[1],
  );

  /// See [Task.createdAt].
  static final createdAt = obx.QueryDateProperty<Task>(
    _entities[0].properties[2],
  );

  /// See [Task.dueDate].
  static final dueDate = obx.QueryDateProperty<Task>(
    _entities[0].properties[3],
  );

  /// See [Task.isDone].
  static final isDone = obx.QueryBooleanProperty<Task>(
    _entities[0].properties[4],
  );

  /// See [Task.priority].
  static final priority = obx.QueryStringProperty<Task>(
    _entities[0].properties[5],
  );

  /// See [Task.isRepeating].
  static final isRepeating = obx.QueryBooleanProperty<Task>(
    _entities[0].properties[6],
  );

  /// See [Task.startDate].
  static final startDate = obx.QueryDateProperty<Task>(
    _entities[0].properties[7],
  );

  /// See [Task.endDate].
  static final endDate = obx.QueryDateProperty<Task>(
    _entities[0].properties[8],
  );

  /// See [Task.reminders].
  static final reminders = obx.QueryStringProperty<Task>(
    _entities[0].properties[9],
  );

  /// See [Task.repeatConfig].
  static final repeatConfig = obx.QueryStringProperty<Task>(
    _entities[0].properties[10],
  );

  /// See [Task.uuid].
  static final uuid = obx.QueryStringProperty<Task>(
    _entities[0].properties[11],
  );

  /// See [Task.categoryUuids].
  static final categoryUuids = obx.QueryStringVectorProperty<Task>(
    _entities[0].properties[12],
  );

  /// See [Task.startTime].
  static final startTime = obx.QueryDateProperty<Task>(
    _entities[0].properties[13],
  );

  /// See [Task.notes].
  static final notes = obx.QueryStringProperty<Task>(
    _entities[0].properties[14],
  );

  /// See [Task.stats].
  static final stats = obx.QueryStringProperty<Task>(
    _entities[0].properties[15],
  );

  /// See [Task.endTime].
  static final endTime = obx.QueryDateProperty<Task>(
    _entities[0].properties[16],
  );

  /// see [Task.categories]
  static final categories = obx.QueryRelationToMany<Task, TaskCategory>(
    _entities[0].relations[0],
  );

  /// see [Task.completions]
  static final completions = obx.QueryBacklinkToMany<TaskCompletion, Task>(
    TaskCompletion_.task,
  );
}

/// [TaskCompletion] entity fields to define ObjectBox queries.
class TaskCompletion_ {
  /// See [TaskCompletion.id].
  static final id = obx.QueryIntegerProperty<TaskCompletion>(
    _entities[1].properties[0],
  );

  /// See [TaskCompletion.date].
  static final date = obx.QueryDateProperty<TaskCompletion>(
    _entities[1].properties[1],
  );

  /// See [TaskCompletion.isDone].
  static final isDone = obx.QueryBooleanProperty<TaskCompletion>(
    _entities[1].properties[2],
  );

  /// See [TaskCompletion.task].
  static final task = obx.QueryRelationToOne<TaskCompletion, Task>(
    _entities[1].properties[3],
  );

  /// See [TaskCompletion.uuid].
  static final uuid = obx.QueryStringProperty<TaskCompletion>(
    _entities[1].properties[4],
  );

  /// See [TaskCompletion.taskUuid].
  static final taskUuid = obx.QueryStringProperty<TaskCompletion>(
    _entities[1].properties[5],
  );
}

/// [Folder] entity fields to define ObjectBox queries.
class Folder_ {
  /// See [Folder.id].
  static final id = obx.QueryIntegerProperty<Folder>(
    _entities[2].properties[0],
  );

  /// See [Folder.name].
  static final name = obx.QueryStringProperty<Folder>(
    _entities[2].properties[1],
  );

  /// See [Folder.uuid].
  static final uuid = obx.QueryStringProperty<Folder>(
    _entities[2].properties[2],
  );

  /// See [Folder.icon].
  static final icon = obx.QueryStringProperty<Folder>(
    _entities[2].properties[3],
  );

  /// See [Folder.color].
  static final color = obx.QueryStringProperty<Folder>(
    _entities[2].properties[4],
  );
}

/// [Note] entity fields to define ObjectBox queries.
class Note_ {
  /// See [Note.id].
  static final id = obx.QueryIntegerProperty<Note>(_entities[3].properties[0]);

  /// See [Note.content].
  static final content = obx.QueryStringProperty<Note>(
    _entities[3].properties[1],
  );

  /// See [Note.createdAt].
  static final createdAt = obx.QueryDateProperty<Note>(
    _entities[3].properties[2],
  );

  /// See [Note.updatedAt].
  static final updatedAt = obx.QueryDateProperty<Note>(
    _entities[3].properties[3],
  );

  /// See [Note.uuid].
  static final uuid = obx.QueryStringProperty<Note>(_entities[3].properties[4]);

  /// See [Note.folderUuids].
  static final folderUuids = obx.QueryStringVectorProperty<Note>(
    _entities[3].properties[5],
  );

  /// see [Note.folders]
  static final folders = obx.QueryRelationToMany<Note, Folder>(
    _entities[3].relations[0],
  );
}

/// [TaskCategory] entity fields to define ObjectBox queries.
class TaskCategory_ {
  /// See [TaskCategory.id].
  static final id = obx.QueryIntegerProperty<TaskCategory>(
    _entities[4].properties[0],
  );

  /// See [TaskCategory.name].
  static final name = obx.QueryStringProperty<TaskCategory>(
    _entities[4].properties[1],
  );

  /// See [TaskCategory.icon].
  static final icon = obx.QueryStringProperty<TaskCategory>(
    _entities[4].properties[2],
  );

  /// See [TaskCategory.color].
  static final color = obx.QueryStringProperty<TaskCategory>(
    _entities[4].properties[3],
  );

  /// See [TaskCategory.uuid].
  static final uuid = obx.QueryStringProperty<TaskCategory>(
    _entities[4].properties[4],
  );
}

/// [QuickReminder] entity fields to define ObjectBox queries.
class QuickReminder_ {
  /// See [QuickReminder.id].
  static final id = obx.QueryIntegerProperty<QuickReminder>(
    _entities[5].properties[0],
  );

  /// See [QuickReminder.title].
  static final title = obx.QueryStringProperty<QuickReminder>(
    _entities[5].properties[1],
  );

  /// See [QuickReminder.type].
  static final type = obx.QueryStringProperty<QuickReminder>(
    _entities[5].properties[2],
  );

  /// See [QuickReminder.durationMinutes].
  static final durationMinutes = obx.QueryIntegerProperty<QuickReminder>(
    _entities[5].properties[3],
  );

  /// See [QuickReminder.notifId].
  static final notifId = obx.QueryIntegerProperty<QuickReminder>(
    _entities[5].properties[4],
  );
}

/// [BoxPref] entity fields to define ObjectBox queries.
class BoxPref_ {
  /// See [BoxPref.id].
  static final id = obx.QueryIntegerProperty<BoxPref>(
    _entities[6].properties[0],
  );

  /// See [BoxPref.key].
  static final key = obx.QueryStringProperty<BoxPref>(
    _entities[6].properties[1],
  );

  /// See [BoxPref.type].
  static final type = obx.QueryStringProperty<BoxPref>(
    _entities[6].properties[2],
  );

  /// See [BoxPref.value].
  static final value = obx.QueryStringProperty<BoxPref>(
    _entities[6].properties[3],
  );
}
